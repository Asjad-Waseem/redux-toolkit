{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport data from '../data/data.json';\nexport const blockItemsSlice = createSlice({\n  name: 'items',\n  initialState: {\n    blockItems: data,\n    updateBlockText: \"\"\n  },\n  reducers: {\n    updateBlockText: (state, action) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      //   state.blockItems = 1\n      state.blockItems.row[3].column[action.payload.columnIndex].id(action.payload.columnId).text = state.blockItems.row[3].column[action.payload.columnIndex].id(action.payload.columnData.id).text(action.payload.text);\n    }\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  updateBlockText\n} = blockItemsSlice.actions;\nexport default blockItemsSlice.reducer;","map":{"version":3,"sources":["C:/Users/wel/redux-toolkit-blocks/redux-toolkit-blocks/src/redux/blockItems.js"],"names":["createSlice","data","blockItemsSlice","name","initialState","blockItems","updateBlockText","reducers","state","action","row","column","payload","columnIndex","id","columnId","text","columnData","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AAEA,OAAO,MAAMC,eAAe,GAAGF,WAAW,CAAC;AACzCG,EAAAA,IAAI,EAAE,OADmC;AAEzCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,UAAU,EAAEJ,IADA;AAEZK,IAAAA,eAAe,EAAE;AAFL,GAF2B;AAMzCC,EAAAA,QAAQ,EAAE;AACRD,IAAAA,eAAe,EAAE,CAACE,KAAD,EAAQC,MAAR,KAAmB;AAClC;AACA;AACA;AACA;AACF;AAEAD,MAAAA,KAAK,CAACH,UAAN,CAAiBK,GAAjB,CAAqB,CAArB,EAAwBC,MAAxB,CAA+BF,MAAM,CAACG,OAAP,CAAeC,WAA9C,EAA2DC,EAA3D,CAA8DL,MAAM,CAACG,OAAP,CAAeG,QAA7E,EAAuFC,IAAvF,GAA8FR,KAAK,CAACH,UAAN,CAAiBK,GAAjB,CAAqB,CAArB,EAAwBC,MAAxB,CAA+BF,MAAM,CAACG,OAAP,CAAeC,WAA9C,EAA2DC,EAA3D,CAA8DL,MAAM,CAACG,OAAP,CAAeK,UAAf,CAA0BH,EAAxF,EAA4FE,IAA5F,CAAiGP,MAAM,CAACG,OAAP,CAAeI,IAAhH,CAA9F;AACC;AATO;AAN+B,CAAD,CAAnC,C,CAoBP;;AACA,OAAO,MAAM;AAAEV,EAAAA;AAAF,IAAsBJ,eAAe,CAACgB,OAA5C;AAEP,eAAehB,eAAe,CAACiB,OAA/B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport data from '../data/data.json';\r\n\r\nexport const blockItemsSlice = createSlice({\r\n  name: 'items',\r\n  initialState: {\r\n    blockItems: data,\r\n    updateBlockText: \"\",\r\n  },\r\n  reducers: {\r\n    updateBlockText: (state, action) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n    //   state.blockItems = 1\r\n\r\n    state.blockItems.row[3].column[action.payload.columnIndex].id(action.payload.columnId).text = state.blockItems.row[3].column[action.payload.columnIndex].id(action.payload.columnData.id).text(action.payload.text)\r\n    },\r\n\r\n  },\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { updateBlockText } = blockItemsSlice.actions\r\n\r\nexport default blockItemsSlice.reducer"]},"metadata":{},"sourceType":"module"}